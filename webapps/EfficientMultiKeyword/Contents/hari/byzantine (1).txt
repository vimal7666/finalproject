// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Types.sol";
import "./Users.sol";

contract RansomwareDetection is Users {
    using Types for *;

    mapping(address => string[]) public userFiles;
    mapping(address => string) public ipfsHashes;
    mapping(address => mapping(string => bool)) public userIPFSHashes;
    mapping(address => bool) public isByzantineNode; // Track Byzantine nodes

    constructor(string memory name_, string memory email_) {
        Types.UserDetails memory userDetails = Types.UserDetails({
            role: Types.UserRole.Admin,
            id_: msg.sender,
            name: name_,
            email: email_
        });
        add(userDetails);
    }

    modifier onlyAdmin() {
        require(getUserRole(msg.sender) == Types.UserRole.Admin, "Only admin can perform this action");
        _;
    }

    modifier onlyUserInRansomware() {
    require(getUserRole(msg.sender) == Types.UserRole.User, "Only users can perform this action");
    _;
}

      function addUser(Types.UserDetails memory user_) public {
        adduser(user_, msg.sender);
    }

    function setUserAsByzantine(address nodeAddress) public onlyAdmin {
        isByzantineNode[nodeAddress] = true; // Mark a node as Byzantine
    }

    function storeIPFSHash(string memory ipfsHash) public onlyUser {
        require(!isByzantineNode[msg.sender], "Byzantine nodes cannot store IPFS hashes");
        userFiles[msg.sender].push(ipfsHash);
        userIPFSHashes[msg.sender][ipfsHash] = true;
    }

    function getUserDetails(address id_) public view returns (Types.UserDetails memory) {
        return getuserDetails(id_);
    }

    function getIPFSHash(address userAddress) public view onlyUser returns (string memory) {
        return ipfsHashes[userAddress];
    }

    function getUserFileHashes(address userAddress) public view onlyUser returns (string[] memory) {
        return userFiles[userAddress];
    }

    function retrieveFileFromIPFS(string memory ipfsHash) public view onlyUser returns (string memory) {
        return ipfsHash;
    }

    function getUserRole(address userAddress) public view returns (Types.UserRole) {
    return users[userAddress].role;
}


    receive() external payable {}
}
